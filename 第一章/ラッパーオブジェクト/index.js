// Stringの`toUpperCase`メソッドを呼び出せる
"string".toUpperCase(); // => "STRING"

"sTrInG".toUpperCase(); // => "STRING"

// "input value"の値をラップしたStringのインスタンスを生成
const str = new String("input value");
// StringのインスタンスメソッドであるtoUpperCaseを呼び出す
str.toUpperCase(); // => "INPUT VALUE"

//このようにインスタンス化されたものは、プリミティブ型の値を包んだ（ラップした）オブジェクトと言えます。 そのため、このようなオブジェクトをプリミティブ型の値に対してのラッパーオブジェクトと呼びます。

// ラッパーオブジェクトは、プリミティブ型の値を包んだオブジェクトです。 ラッパーオブジェクトは、プリミティブ型の値に対してメソッドを呼び出すために利用されます。 
//このようなラッパーオブジェクトは、プリミティブ型の値を包んだ（ラップした）オブジェクトと言えます。 そのため、このようなオブジェクトをプリミティブ型の値に対してのラッパーオブジェクトと呼びます。


// プリミティブの文字列は"string"型
const str = "文字列";
console.log(typeof str); // => "string"
// ラッパーオブジェクトは"object"型
const stringWrapper = new String("文字列");
console.log(typeof stringWrapper); // => "object"

//オブジェクト型になることでメソッドが呼べるようになることが何より嬉しい。

// JavaScriptでオブジェクトとしてラッパーを使用する主な利点は、オブジェクトとして追加のメソッドやプロパティを持つことができるという点です。つまり、ラッパーオブジェクトを使用することで、文字列に対してさまざまな操作を行うメソッドを利用することが可能となります。

// しかし、通常はプリミティブ値を直接使用して、それにメソッドを呼び出すことが多いです。JavaScriptはプリミティブ値に対するメソッド呼び出しを補完するために、内部的に一時的にラッパーオブジェクトを生成します。

// 例：

// javascript
// Copy code
// const str = "文字列";
// console.log(str.toUpperCase()); // => "文字列"というプリミティブ値に対してメソッドを呼び出しています
// ただし、普段のコーディングではnew String()のようなラッパーオブジェクトを自身で生成することはほとんどありません。プリミティブ値を使用する方がメモリ効率が良く、パフォーマンスも高いためです。

// JavaScriptが自動的にラッパーオブジェクトを扱う特性を理解しておくと、より高度なプログラムを書く際に役立つ知識になりますね！✨

const str = "string";
// プリミティブ型の値に対してメソッド呼び出しを行う
str.toUpperCase();
// `str`へアクセスする際に"string"がラッパーオブジェクトへ変換され、
// ラッパーオブジェクトはStringのインスタンスなのでメソッドを呼び出せる
// つまり、上のコードは下のコードと同じ意味である
(new String(str)).toUpperCase();

// JavaScriptは、プリミティブ型の値にメソッドやプロパティを持たせるために、一時的にラッパーオブジェクトを作成します。この動作は「オートボクシング」と呼ばれます。

// javascript
// Copy code
// const str = "string";
// str.toUpperCase();
// このコードが実行されると、JavaScriptエンジンはstrというプリミティブ型の文字列に.toUpperCase()メソッドを適用しようとします。しかし、プリミティブ型の文字列はメソッドを持っていません。そこでJavaScriptエンジンは内部的に一時的にStringオブジェクトを作成します。これにより、Stringオブジェクトが持つメソッドやプロパティを利用できるようになります。

// 以下のコードは、この内部的なプロセスを模したものです：

// javascript
// Copy code
// (new String(str)).toUpperCase();
// この行では明示的にnew String(str)を使用してStringオブジェクトを作成し、その後に.toUpperCase()メソッドを適用しています。

// この2つのコードが同等であると言っているのは、これがJavaScriptエンジンが内部的に行っているプロセスを表現しているからです。ただし、実際のコーディングでは最初の方法（プリミティブ型の値に直接メソッドを適用する方法）を使用するのが一般的で、簡潔で効率的です


// JavaScriptには、リテラルを使ったプリミティブ型の文字列とラッパーオブジェクトを使った文字列オブジェクトがあります（真偽値や数値についても同様です）。 この2つを明示的に使い分ける利点はないため、常にリテラルを使うことを推奨します。 理由として次の3つが挙げられます。

// 必要に応じて、プリミティブ型の文字列は自動的にラッパーオブジェクトに変換されるため
// new String("string")のようにラッパーオブジェクトのインスタンスを扱う利点がないため
// ラッパーオブジェクトをtypeof演算子で評価した結果が、プリミティブ型ではなく"object"となり混乱を生むため

// OK: リテラルを使う　→ 明示的ではないが、プリミティブ型の文字列として扱われるオブジェクト
const str = "文字列";
// NG: ラッパーオブジェクトを使う
const stringWrapper = new String("文字列");

//MEMO：オートボクシング：プリミティブ型の値に対してメソッドを呼び出すと、内部的にラッパーオブジェクトが作成され、そのラッパーオブジェクトのメソッドが呼び出される仕組み