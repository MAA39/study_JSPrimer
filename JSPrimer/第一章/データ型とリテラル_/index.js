// 正規表現リテラル
// JavaScriptは正規表現をリテラルで書くことができます。 正規表現リテラルは/（スラッシュ）と/（スラッシュ）で正規表現のパターン文字列を囲みます。 正規表現のパターン内では、+などの特定の記号や\（バックスラッシュ）からはじまる特殊文字が特別な意味を持ちます。

// 次のコードでは、数字にマッチする特殊文字である\dを使い、1文字以上の数字にマッチする正規表現をリテラルで表現しています。

const numberRegExp = /\d+/; // 1文字以上の数字にマッチする正規表現
// `numberRegExp`の正規表現が文字列"123"にマッチするかをテストする
console.log(numberRegExp.test("123")); // => true



// リテラルとは、コード内に直接書かれる固定の値を表現するための記法です。リテラルはデータ型に基づいて分類されることが多いです。JavaScriptにおける主なリテラルとその使用例を以下に示します：

const stringLiteral = 'hello'; // 文字列リテラル
const numericLiteral = 123;    // 数値リテラル
const booleanLiteral = true;   // ブールリテラル
const objectLiteral = {a: 1, b: 2}; // オブジェクトリテラル
const arrayLiteral = [1, 2, 3]; // 配列リテラル

// 上記の各行に示すように、リテラルは特定の値を直接コードに記述する方法を提供します。リテラルは変数に代入されることもありますし、関数の引数として直接使用されることもあります。

// 例えば、関数呼び出しでリテラルを直接使用する場合があります：

console.log('Hello, World!'); // 'Hello, World!' は文字列リテラル
// リテラルは、プログラムが実行されるときにその値が固定されている、つまり変更されない値を表現するために使用されます。この特性により、コードの読み手にとってそれが何を表しているのかが明確になります

// 例えば、次のコードでは、変数に代入された値が変更されているため、コードの読み手にとってその値が何を表しているのかが明確ではありません：

let a = 1;  // この時点で a は 1 になっている
a = 2;  // この時点で a は 2 になっている
a = 3;  // この時点で a は 3 になっている

// このような場合、変数aが何を表しているのかを理解するには、コードを読み進める必要があります。しかし、次のコードでは、変数aが何を表しているのかを理解するために、コードを読み進める必要はありません：

const a1 = 1;  // a は 1 である
// a1 = 2;  // エラー: 再代入はできない

// このように、リテラルはコードの読み手にとって、その値が何を表しているのかを明確にするために役立ちます。

// リミティブ型は基本的にリテラルで表現しますが、真偽値（Boolean）、数値（Number）、文字列（String）はそれぞれオブジェクトとして表現する方法もあります。 これらはプリミティブ型の値をラップしたようなオブジェクトであるためラッパーオブジェクトと呼ばれます。

// ラッパーオブジェクトは、new演算子と対応するコンストラクタ関数を利用して作成できます。 たとえば、文字列のプリミティブ型に対応するコンストラクタ関数はStringとなります。

// 次のコードでは、Stringのラッパーオブジェクトを作成しています。 ラッパーオブジェクトは、名前のとおりオブジェクトの一種であるためtypeof演算子の結果も"object"です。 また、オブジェクトであるためlengthプロパティなどのオブジェクトが持つプロパティを参照できます。

// 文字列をラップしたStringラッパーオブジェクト
const str = new String("文字列");
// ラッパーオブジェクトは"object"型のデータ
console.log(typeof str); // => "object"
// Stringオブジェクトの`length`プロパティは文字列の長さを返す
console.log(str.length); // => 3

// 7種類のプリミティブ型とオブジェクトがある
// リテラルはデータ型の値を直接記述できる構文として定義されたもの
// プリミティブ型の真偽値、数値、BigInt、文字列、nullはリテラル表現がある
// オブジェクト型のオブジェクト、配列、正規表現にはリテラル表現がある
// プリミティブ型のデータでもプロパティアクセスができる